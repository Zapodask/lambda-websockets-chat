AWSTemplateFormatVersion: 2010-09-09
Description: Lambda + Api Gateway

Parameters:
  projectName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project
  jwtSecretKey:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: KIJUHYTR5ET4RTGY7
  bucketName:
    Type: String
    AllowedPattern: "[a-zA-Z0-9]+[a-zA-Z0-9-]+[a-zA-Z0-9]+"
    Default: my-project-bucket-lambda-code
  apiGatewayStageName:
    Type: String
    AllowedPattern: "[a-z0-9]+"
    Default: dev

Resources:
# Authorizer
  ## Bucket com o código da função
  authorizerBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${bucketName}-authorizer

  ## Função IAM da lambda
  authorizerIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: SecretsManager
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - SecretsManager:GetSecretValue
                Resource: !GetAtt jwtSecretsManager.Arn

  ## Função lambda
  authorizerLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: Lambda function authorizer
      FunctionName: !Sub ${projectName}-authorizer
      Handler: index.handler
      Role: !GetAtt authorizerIAMRole.Arn
      Runtime: python3.9
      Environment:
        Variables: 
          JWT_SECRET_ARN: !GetAtt jwtSecretsManager.Arn

  ## Logs
  authorizerLambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${projectName}-authorizer
      RetentionInDays: 90

  ## Guardar jwt secret
  jwtSecretsManager:
    Type: AWS::SecretsManager::Secret
    Properties: 
      Description: Jwt secret
      Name: !Sub ${projectName}-jwt-secret
      tags:
        -
          key: JWT_SECRET
          value: !Ref jwtSecretKey

# Lambda app
  ## Bucket com o código da função
  bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref bucketName

  ## Função IAM da lambda
  lambdaIAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/AmazonAPIGatewayInvokeFullAccess
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  -
                    dynamodb:PutItem
                  -
                    dynamodb:DeleteItem
                  -
                    dynamodb:GetItem
                  -
                    dynamodb:Scan
                  -
                    dynamodb:UpdateItem
                Resource: !GetAtt dynamoDbUsersTable.Arn

  ## Função lambda
  lambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          def handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Hello from Lambda!')
              }
      Description: Lambda function
      FunctionName: !Sub ${projectName}-auth
      Handler: index.handler
      Role: !GetAtt lambdaIAMRole.Arn
      Runtime: python3.9
      Environment:
        Variables: 
          USERS_DB: !Sub ${projectName}-users
  ## Logs
  lambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub /aws/lambda/${projectName}
      RetentionInDays: 90

# Api Gateway
  ## Api
  apiGateway:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Ref projectName
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: "$request.body.action"
      ApiKeySelectionExpression: $request.header.x-api-key

  ## Criando authorizer
  apiGatewayAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      ApiId: apiGateway
      Name: !Sub ${projectName}-authorizer
      AuthorizerType: REQUEST
      AuthorizerUri: !GetAtt authorizerLambdaFunction.Arn

  ## Routes
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: $connect
  
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: $disconnect
  
  DefaultRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref apiGateway
      RouteKey: $default

# DynamoDB table
  dynamoDbUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub ${projectName}-users
      AttributeDefinitions: 
        - 
          AttributeName: username
          AttributeType: S
      KeySchema:
        -
          AttributeName: username
          KeyType: HASH
      ProvisionedThroughput: 
        ReadCapacityUnits: 10
        WriteCapacityUnits: 10
